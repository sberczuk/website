%!PS-Adobe-3.0
%%Title: (Untitled1)
%%Creator: (Microsoft Word: LaserWriter 8 8.2)
%%CreationDate: (2:22 PM Monday, September 11, 1995)
%%For: (Ed Morgan)
%%Pages: 6
%%DocumentFonts: Palatino-Roman Symbol Palatino-Bold Palatino-Italic Helvetica-Bold Helvetica Courier
%%DocumentNeededFonts: Palatino-Roman Symbol Palatino-Bold Palatino-Italic Helvetica-Bold Helvetica Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%%DocumentMedia: Default 612 792 0 () ()
%ADO_ImageableArea: 31 31 583 761
%%EndComments
userdict begin/dscInfo 5 dict dup begin
/Title(Untitled1)def
/Creator(Microsoft Word: LaserWriter 8 8.2)def
/CreationDate(2:22 PM Monday, September 11, 1995)def
/For(Ed Morgan)def
/Pages 1 def
end def end
/md 186 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if end
%%EndProlog
%%BeginSetup
md begin
countdictstack[{
%%BeginFeature: *ManualFeed False
1 dict dup /ManualFeed false put setpagedevice
%%EndFeature
}featurecleanup
countdictstack[{
%%BeginFeature: *PageSize LetterSmall

    2 dict dup /PageSize [612 792] put dup /ImagingBBox [25 25 587 767] put setpagedevice
%%EndFeature
}featurecleanup
(Ed Morgan)setjob
/mT[1 0 0 -1 31 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Palatino-Roman
%%IncludeFont: Symbol
%%IncludeFont: Palatino-Bold
%%IncludeFont: Palatino-Italic
%%IncludeFont: Helvetica-Bold
%%IncludeFont: Helvetica
%%IncludeFont: Courier
/f0_1/Palatino-Roman
:mre
/f0_10 f0_1 10 scf
/f0_9 f0_1 9 scf
/f1_1/Symbol
:bsr
240/apple pd
:esr
/f1_10 f1_1 10 scf
/f1_9 f1_1 9 scf
/f2_1/Palatino-Bold
:mre
/f2_10 f2_1 10 scf
/f3_1 f1_1
def
/f3_10 f3_1 10 scf
/f4_1/Palatino-Italic
:mre
/f4_10 f4_1 10 scf
/f5_1 f1_1
:mi
/f5_10 f5_1 10 scf
/f6_1/Helvetica-Bold
:mre
/f6_10 f6_1 10 scf
/f7_1/Helvetica
:mre
/f7_10 f7_1 10 scf
/f7_9 f7_1 9 scf
/f8_1/Courier
:mre
/f8_10 f8_1 10 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Ed Morgan; page: 1 of 6)setjob
%%EndPageSetup
gS 0 0 552 730 rC
247 710 :M
f0_10 sf
(1)S
160 50 :M
f2_10 sf
(A Pattern for Separating Assembly and Processing)S
232 74 :M
f0_10 sf
(Stephen P. Berczuk)S
130 86 :M
(Massachusetts Institute of Technology  Center for Space Research)S
174 98 :M
(Room NE80-6015 / 77 Massachusetts Avenue)S
225 110 :M
(Cambridge, MA 02139)S
201 122 :M
(\(617\) 253-3840 /berczuk@mit.edu)S
59 142 :M
f6_10 sf
(Context)S
59 156 :M
f0_10 sf
(After a system involving a number of non co-located development teams is designed, functions)S
59 168 :M
(are assigned to different teams. It necessary to decouple work being done by development teams)S
59 180 :M
(working on the different components of a system in order to prevent development bottlenecks.)S
59 192 :M
(To facilitate this decoupling, upstream components need not be directly concerned with)S
59 204 :M
(downstream processing.)S
59 224 :M
(Using a pattern such as Builder [Design], which constructs objects from a generic data stream)S
59 236 :M
(based on the content in the stream, will decouple the interfaces between different development)S
59 248 :M
(groups, by insulating the operations team from knowing the definition of units of work, and the)S
59 260 :M
(details of which packets belong in which collections. It is still necessary to decouple the upstream)S
59 272 :M
(and downstream components.)S
59 292 :M
(The problem can be summarized in this way:)S
59 316 :M
f2_10 sf
(In an environment  where components developed by separate teams with different focuses,)S
59 328 :M
(must interoperate, it is necessary to partition responsibilities in such a way that dependencies)S
59 340 :M
(can be reduced while interoperability can be maintained.  In particular, the well-defined)S
59 352 :M
(portions of the system  should be isolated from  the \322to be specified\323 pieces.  This may be)S
59 364 :M
(particularly important if teh teams are geographically distributed.)S
59 384 :M
f0_10 sf
(A telemetry application is used here as an example. Telemetry processing systems are examples)S
59 396 :M
(of applications in which one subsystem creates objects from external inputs in a well-defined)S
59 408 :M
(manner and another subsystem processes these collected data, in a less clearly defined manner.)S
59 420 :M
(This context can, however, be generalized to include any system in which the interfaces between)S
59 432 :M
(a producer and consumers need to be divided cleanly.)S
59 452 :M
f6_10 sf
(Satellite Data Processing)S
59 466 :M
f0_10 sf
(A science satellite is composed of different instruments)S
f0_9 sf
0 -3 rm
(1)S
0 3 rm
307 466 :M
f0_10 sf
( developed by different institutions.)S
59 478 :M
(Typically the system is divided into at least two subsystems:)S
95 490 :M
<A5>S
113 490 :M
(one team is responsible for converting a \322byte-stream\323 into telemetry packets and)S
113 502 :M
(assembling the telemetry packets into units that represent the information in its)S
113 514 :M
(original form)S
172 511 :M
f0_9 sf
(2)S
177 514 :M
f0_10 sf
(,)S
95 526 :M
<A5>S
113 526 :M
(other teams are responsible for processing the data from the telemetry.)S
59 538 :M
(The  following diagram illustrates a typical telemetry processing system:)S
-4127 -4126 -1 1 -4125 -4126 1 -4127 -4127 @a
59 607.24 -.24 .24 202.24 607 .24 59 607 @a
59 627 :M
f0_9 sf
(1)S
64 630 :M
f0_10 sf
(An \322instrument\323 is a component of the spacecraft, and can include items such as telescopes,)S
59 642 :M
(detectors, or on board data processing systems.)S
59 659 :M
f0_9 sf
(2)S
64 662 :M
f0_10 sf
(Telemetry is a transport medium. The satellite collects data into a buffer, and then divides the)S
59 674 :M
(buffer into smaller pieces for transport. The ground systems must then re-assemble the packets)S
59 686 :M
(into a representation of the buffer so that it can be interpreted.)S
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Ed Morgan; page: 2 of 6)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
278 741 :M
f0_10 sf
(2)S
136 91 338 157 rC
150 159 :M
f7_10 sf
(Telemetry)S
150 171 :M
(Byte)S
150 183 :M
-.044(Stream)A
231.5 110.5 105 42 rS
238 126 :M
(Assemble Packets)S
238 138 :M
-.094(From Telemetry )A
238 150 :M
-.044(Stream)A
229.5 183.5 111 35 rS
234 196 :M
(Assemble packets into)S
234 208 :M
(meaningful units.)S
218.5 101.5 130 122 rS
403.5 143.5 69 43 rS
411 162 :M
(Process)S
411 174 :M
-.01(units of work)A
13 156 204 216 166 @k
176 167 -1 1 211 166 1 176 166 @a
13 156 204 395 169 @k
356 170 -1 1 390 169 1 356 169 @a
13 -114 -66 272 182 @k
-1 -1 273 177 1 1 272 155 @b
248 242 :M
f6_10 sf
(Assembly)S
394 244 :M
(Processing)S
356 138 :M
f7_10 sf
(Units)S
356 150 :M
(of)S
356 162 :M
-.108(Work)A
gR
gS 31 31 552 730 rC
90 285 :M
f0_10 sf
(In a science satellite telemetry processing application the requirements for different software)S
90 297 :M
(components evolve at different rates. This is partially due to the fact that these applications are)S
90 309 :M
(developed by different teams.  Often these teams have different operational and scientific)S
90 321 :M
(requirements. Telemetry handling is divided into two phases:)S
90 341 :M
<A5>S
108 341 :M
f4_10 sf
(Assembly ,)S
f0_10 sf
( which processes objects from an input stream, classifies them and assembles larger)S
108 353 :M
(units, as necessary.  Some of the units are composed of a number of packets; an example of)S
108 365 :M
(this is a )S
144 365 :M
f4_10 sf
(partition)S
f0_10 sf
(. Some of the units are simply individual packets; an example is packets)S
108 377 :M
(containing )S
f4_10 sf
(status)S
182 377 :M
f0_10 sf
( information about the spacecraft or the instrument. This software is)S
108 389 :M
(typically well defined, and being key to any downstream processing, it is preferable that it be)S
108 401 :M
(built and tested as soon as possible.)S
90 421 :M
<A5>S
108 421 :M
f4_10 sf
(Processing)S
152 421 :M
f0_10 sf
( , which analyses or reports on the data. This is typically more loosely defined since)S
108 433 :M
(there are often many ways to process data \(consider scientific data analysis applications\).)S
108 445 :M
(Because of the variety of ways in which data can be processed we wish to maintain a flexible)S
108 457 :M
(system. The processing requirements may also take longer to come to closure since they are)S
108 469 :M
(subject to the influence of more players.)S
90 489 :M
(The operational requirements for the transmission and assembly of telemetry packets are well)S
90 501 :M
(defined since they are based on well established standards and on the specifications of the)S
90 513 :M
(satellite hardware and controlling software. Telemetry assembly is also rather similar from)S
90 525 :M
(mission to mission, thus requirements can be more easily defined.)S
90 545 :M
(Processing the assembled units of data is less well defined, since the operational requirements)S
90 557 :M
(vary from mission to mission. Furthermore, these requirements may depend on preliminary)S
90 569 :M
(analysis being done by scientists who designed the experiments on the satellite.)S
f0_9 sf
0 -3 rm
(3)S
0 3 rm
446 569 :M
f0_10 sf
( Additionally)S
90 581 :M
(there may be a desire to have a variety of processing operations to be performed in different)S
90 593 :M
(clients which will need the services of the assembly system.)S
90 613 :M
(We need a way to isolate the \322assembly\323 system from the \322processing\323 system so that the)S
90 625 :M
(assembly system can be developed and tested without waiting for the processing system\325s)S
90 637 :M
(requirements to firm up, thus liberating one part of the system from the development delays)S
90 649 :M
(caused by ill defined requirements for the downstream part of the system.)S
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
90 670.24 -.24 .24 233.24 670 .24 90 670 @a
90 690 :M
f0_9 sf
(3)S
95 693 :M
f0_10 sf
(As an example, the hardware for the )S
259 693 :M
f4_10 sf
(X-Ray Timing Explorer )S
f0_10 sf
(was designed to transmit  quite a bit)S
90 705 :M
(of status information for verification, with the idea that some of it would be useful downstream.)S
90 717 :M
(It is still being decided how the ground operation team will use all the information.)S
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Ed Morgan; page: 3 of 6)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
278 741 :M
f0_10 sf
(3)S
90 81 :M
(Each component is  developed by distinct teams of developers, so building a tightly integrated)S
90 93 :M
(system would create a great deal of uncertainty in the schedule.)S
90 113 :M
(Traditionally the systems are designed with end to end processing in mind. If the end to end)S
90 125 :M
(processing is not well defined, then the entire system can be held back while the details of)S
90 137 :M
(downstream processing are resolved.)S
90 157 :M
(We wish to isolate the assembler from the processor , so we need a way for the assembler to hand)S
90 169 :M
(the completed unit off to the processor when the unit is available. We want a processing function)S
90 181 :M
(to be added to a system dynamically, without changing the assembly software.)S
90 201 :M
(To summarize the forces at work:)S
126 221 :M
<A5>S
144 221 :M
(Requirements for one component of a system are available before downstream)S
144 233 :M
(processing is defined.)S
126 253 :M
<A5>S
144 253 :M
(There is a  need to test the assembly code independent of the processing software.)S
126 273 :M
<A5>S
144 273 :M
(Assembly and downstream processing may be developed by separate, often non)S
500 273 :M
(-)S
144 285 :M
(collocated groups.)S
126 305 :M
<A5>S
144 305 :M
(The assembly system should be developed assuming nothing of the downstream)S
144 317 :M
(processing.)S
90 337 :M
(We  can resolve the problem of decoupling the development of two systems, while maintaining)S
90 349 :M
(operational coupling by the following:)S
90 373 :M
f2_10 sf
(By providing a facility to set handlers to be invoked when a complete unit is available for)S
90 385 :M
(processing, we are able to isolate the assembly software from the processing software. Virtual)S
90 397 :M
(functions help make the  details of the assembly operation transparent.)S
90 421 :M
f0_10 sf
(This is similar to a )S
f4_10 sf
(callback)S
205 421 :M
f0_10 sf
( pattern, where a handler is specified to an object to be called when an)S
90 433 :M
(event occurs, but the motivation differs.  The emphasis in this pattern is on providing a way to)S
90 445 :M
(allow teams of developers to decouple their work.)S
90 469 :M
(The classes representing the units of work that the assembly software processes have  a method)S
90 481 :M
(to set a handler which will be called when the unit is complete. The units of work can be)S
90 493 :M
(individual data objects or objects created by assembling objects from a data stream. The interface)S
90 505 :M
(to the assembly mechanism can be hidden by using a Factory pattern or Exemplar [Idioms])S
90 517 :M
(Idiom. In doing this we would provide that each data object received by the assembly stream be)S
90 529 :M
(classified to be an instance of a subclass of a processable unit, the packet, and a virtual apply\(\))S
90 541 :M
(method is invoked. In the context of each apply\(\) call, an object is inserted into the appropriate)S
90 553 :M
(collection, and if the collection  is complete, the handler is called.)S
90 577 :M
(Examples of collections include partitions \(which represent a buffer  of data\),  and status message)S
90 589 :M
(packets.)S
90 613 :M
(The client creates a handler object \(it can also be a pointer to a function\) and sets the handler for)S
90 625 :M
(objects of the same class of collection. Only units which interest the client will be sent to it. The)S
90 637 :M
(handler can perform a variety of operations, such as interpreting the data stream and performing)S
90 649 :M
(analysis, or simply  reporting the information to scientist s or operations staff.)S
90 669 :M
(The  participants in this pattern are:)S
126 689 :M
<A5>S
144 689 :M
(the )S
f4_10 sf
(collection)S
f0_10 sf
( classes, which have methods to set handlers to be invoked when the)S
144 701 :M
(collection is complete,)S
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Ed Morgan; page: 4 of 6)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
278 741 :M
f0_10 sf
(4)S
126 81 :M
<A5>S
144 81 :M
(the )S
f4_10 sf
(handler)S
191 81 :M
f0_10 sf
( which will process an instance of collection, and)S
126 101 :M
<A5>S
144 101 :M
(the )S
f4_10 sf
(client)S
183 101 :M
f0_10 sf
(, which associates a handler with a collection.)S
90 125 :M
(The solution is illustrated in the following diagram:)S
168 136 275 181 rC
58 26 211.5 273.5 @f
58 26 397.5 186.5 @f
58 26 214.5 184.5 @f
193 280 :M
f7_10 sf
(Packet)S
13 66 114 212 197 @k
-1 -1 213 260 1 1 212 203 @b
188 188 :M
(Collection)S
376 191 :M
(Handler)S
3 lw
57 23 309 303 @f
291 309 :M
(Client)S
239 193.25 -.25 .25 304.25 286 .25 239 193 @a
-.25 -.25 309.25 286.25 .25 .25 377 198 @b
216 224 :M
f7_9 sf
(2.Packet)S
216 235 :M
(inserts)S
216 246 :M
(self into)S
216 257 :M
(Collection)S
349 256 :M
(1. Client associates)S
349 267 :M
(Handler with collection)S
10 156 204 367 182 @k
244 182.25 -.25 .25 362.25 182 .25 244 182 @a
212 161 :M
-.037(3. Collection goes to Handler when complete)A
187 306 :M
f6_10 sf
(Assembly )S
366 304 :M
(Processing)S
gR
gS 31 31 552 730 rC
90 334 :M
f6_10 sf
(Example syntax. \(C++\))S
90 348 :M
f0_10 sf
(The following example shows a use of this pattern.  Though the example implies that collection)S
90 360 :M
(and handling processing occur in the same address space, it is simple to extend the pattern to)S
90 372 :M
(work when the components are on different processors.)S
90 392 :M
(The collection \(in this case, a )S
f4_10 sf
(Partition)S
255 392 :M
f0_10 sf
(\) class has a method to set a class-wide handler to be called)S
90 404 :M
(when a complete unit is available,  and a )S
f4_10 sf
(dispose\(\))S
308 404 :M
f0_10 sf
( method to invoke the handler on the unit of)S
90 416 :M
(work, The collection can also have an )S
f4_10 sf
(isComplete\(\))S
f0_10 sf
(  method.)S
90 436 :M
(The processing client sets the handlers to be called when a \322unit of work\323 is available using the)S
90 448 :M
f4_10 sf
(setHandler\(\))S
f0_10 sf
( method on the collection class. The unit of  work handler is set for each class of)S
90 460 :M
(collections. The client then gets the next packet from the data stream using a technique based on a)S
90 472 :M
(factory pattern, which classifies the bytes that represent a packet into the appropriate subclass.)S
90 484 :M
(The virtual )S
f4_10 sf
(process\(\))S
177 484 :M
f0_10 sf
( method is then invoked on the packet. The process method assembles the)S
90 496 :M
(packet into a larger collection, if necessary. If the packet completes the unit of work \(recall that a)S
90 508 :M
(single packet can represent a unit of work\) the handler is invoked.)S
117 542 :M
f8_10 sf
(PartitionHandler aCHandler;)S
117 553 :M
(// Handler to be called for a full partition collection)S
117 575 :M
(StatusMsgHandler aSOMsgHandler;)S
117 586 :M
(// Handler to be called for a single packet unit)S
117 608 :M
(class Partition)S
117 619 :M
(// a collection that is assembled from a number of related packets)S
117 630 :M
({)S
117 641 :M
(public:)S
117 652 :M
(// constructors and the like)S
117 674 :M
(setHandler\(/*function taking a pointer to a Partition*/\);)S
117 685 :M
(// set the handler to be called for all complete partitions)S
117 707 :M
(void dispose\(\);)S
117 718 :M
(// apply the handler to the object)S
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Ed Morgan; page: 5 of 6)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
278 741 :M
f0_10 sf
(5)S
117 81 :M
f8_10 sf
(};)S
117 103 :M
(ingest_client\(\){)S
126 114 :M
(StandAloneObject::setHandler\(aSOMsgHandler\);)S
126 125 :M
(Collection::setHandler\(aCHandler\);)S
126 147 :M
(Packet* pkt = getNextPacket\(\);)S
126 158 :M
(// create a subclass of packet based on info in data stream.)S
126 180 :M
(pkt->process\(\);)S
126 191 :M
(// virtual function puts the packet into the right collection if)S
126 202 :M
(//appropriate\) and the collection checks to see if it is full.)S
126 213 :M
(// if pkt is standalone, the handler is called.)S
117 224 :M
(})S
117 246 :M
(Packet::process\(\))S
117 257 :M
({)S
117 268 :M
(// takes the packet and inserts it into the collection, perhaps)S
117 279 :M
(// doing some processingto determine)S
117 290 :M
(// which of a number of collections is appropriate)S
117 301 :M
(theCollection->insert\(this\);)S
117 312 :M
(if\(theCollection->isComplete\(\)\))S
126 323 :M
(theCollection->dispose\(\);)S
117 334 :M
(// dispatch the collection to the appropriate handler)S
117 345 :M
(})S
90 364 :M
f0_10 sf
(This pattern results in a situation where the assembly software needs to know only the following)S
90 376 :M
(about the downstream processing:)S
126 396 :M
<A5>S
144 396 :M
(What the units of work are that will be dispatched. The details of this which depend)S
144 408 :M
(on the individual instruments can be hidden from the assembly client through the)S
144 420 :M
(use of Factories and virtual functions.)S
126 440 :M
<A5>S
144 440 :M
(The methods used to set the handlers.)S
90 460 :M
(Additionally, the downstream processing client needs to know only:)S
126 480 :M
<A5>S
144 480 :M
(The type of units of work to expect.)S
126 500 :M
<A5>S
144 500 :M
(The handling that each unit of work should be afforded.)S
90 520 :M
(Applications of this pattern include telemetry processing where you must classify and assemble)S
90 532 :M
(packets from a telemetry stream into partitions, and certain packets represent status messages,)S
90 544 :M
(which are not assembled into partitions. This pattern can be also be applied in any system where)S
90 556 :M
(there is a need for one system to perform an operation, and then hand results over to another)S
90 568 :M
(system for further processing.  It can be extended by allowing a list of handlers to be called)S
90 580 :M
(whenever a unit of work is available, in a manner similar to the way the standard C library)S
90 592 :M
(provides the )S
148 592 :M
f4_10 sf
(atexit)S
171 592 :M
f0_10 sf
(\(\) function)S
f0_9 sf
0 -3 rm
(4)S
0 3 rm
222 592 :M
f0_10 sf
(.)S
90 616 :M
f2_10 sf
(Related Patterns)S
90 628 :M
f0_10 sf
(The use of a generic constructor to classify & build objects from a data stream, is a variant of the)S
90 640 :M
f4_10 sf
(Factory)S
121 640 :M
f0_10 sf
(  [Design]. The particular variation of Factory used in the implementation on which this)S
-4096 -4095 -1 1 -4094 -4095 1 -4096 -4096 @a
90 658.24 -.24 .24 233.24 658 .24 90 658 @a
90 678 :M
f0_9 sf
(4)S
95 681 :M
f0_10 sf
(The need to register multiple handlers can be made unnecessary by defining a handler object)S
90 693 :M
(that performs some arbitrary list of functions on the complete unit of work. The UNIX atexit\(\))S
90 705 :M
(function is used to register a handler to be called as the process exits. By calling atexit\(\) with a)S
90 717 :M
(pointer to a function a user adds an )S
f4_10 sf
(additional)S
290 717 :M
f0_10 sf
( handler to be called when the process exits.)S
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Ed Morgan; page: 6 of 6)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
278 741 :M
f0_10 sf
(6)S
90 81 :M
(pattern is based is from the )S
f4_10 sf
(Exemplar)S
251 81 :M
f0_10 sf
( idiom in [Idioms]. The use of virtual functions on objects to)S
90 93 :M
(hide the details of assembly from the assembly application can be expanded to be a separate)S
90 105 :M
(pattern.)S
90 129 :M
f2_10 sf
(References)S
90 141 :M
f0_10 sf
([Design])S
162 141 :M
(Ralph Johnson,  Eric Gamma,  Richard Helm &  John Vlissides, )S
f4_10 sf
(Design Patterns:)S
162 153 :M
(Elements of Object-Oriented Software Architecture)S
369 153 :M
f0_10 sf
(.. Addison Wesley, 1994.)S
90 177 :M
([Idioms])S
162 177 :M
(Jim Coplein, )S
220 177 :M
f4_10 sf
(Advanced C++ Programming Styles and Idioms)S
f0_10 sf
(. Addison Wesley, 1992.)S
90 201 :M
f2_10 sf
(Acknowledgments)S
90 213 :M
f0_10 sf
(The PLoP 94 workshop attendees, especially Doug Schmidt  made many useful comments on the)S
90 225 :M
(early drafts of this paper.  Discussions with Lena Davis help me clarify my thinking about)S
90 237 :M
(Patterns and Pattern Languages in general.)S
90 261 :M
(This work was supported in part by NASA/GSFC contract number NAS5-30612.)S
endp
%%Trailer
end
%%EOF
