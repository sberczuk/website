{\rtf1\mac\deff2 {\fonttbl{\f0\fswiss Chicago;}{\f2\froman New York;}{\f3\fswiss Geneva;}{\f4\fmodern Monaco;}{\f13\fnil Zapf Dingbats;}{\f14\fnil Bookman;}{\f15\fnil N Helvetica Narrow;}{\f16\fnil Palatino;}{\f18\fnil Zapf Chancery;}{\f20\froman Times;}
{\f21\fswiss Helvetica;}{\f22\fmodern Courier;}{\f23\ftech Symbol;}{\f33\fnil Avant Garde;}{\f34\fnil New Century Schlbk;}{\f135\fnil I Courier Oblique;}{\f136\fnil B Courier Bold;}{\f137\fnil BI Courier BoldOblique;}{\f138\fnil I Helvetica Oblique;}
{\f139\fnil B Helvetica Bold;}{\f140\fnil BI Helvetica BoldOblique;}{\f150\fnil I Times Italic;}{\f151\fnil B Times Bold;}{\f152\fnil BI Times BoldItalic;}{\f2004\fnil Century Gothic;}{\f2011\fnil Wingdings;}{\f2017\fnil Lucida Calligraphy;}
{\f2025\fnil Britannic Bold;}{\f2033\fnil Eurostile;}{\f2035\fnil Bell MT;}{\f2515\fnil MT Extra;}{\f5600\fnil AG Old Face Outline;}{\f5671\fnil Rockwell ExtraBold;}{\f5674\fnil Woodtype Ornaments 2;}{\f5862\fnil Bellevue;}
{\f6415\fnil TektoMM_100 LT 250 CN;}{\f6416\fnil TektoMM_240 RG 250 CN;}{\f6417\fnil TektoMM_503 BD 250 CN;}{\f6418\fnil TektoMM_100 LT 564 NO;}{\f6419\fnil TektoMM_240 RG 564 NO;}{\f6420\fnil TektoMM_503 BD 488 NO;}{\f6421\fnil TektoMM_100 LT 850 EX;}
{\f6422\fnil TektoMM_240 RG 850 EX;}{\f6483\fnil Boton Regular;}{\f6484\fnil Boton Italic;}{\f6485\fnil Boton Medium;}{\f6486\fnil Boton MediumItalic;}{\f6578\fnil TektoMM_503 BD 850 EX;}{\f6650\fnil Anna;}{\f6670\fnil Giddyup;}
{\f6671\fnil Giddyup Thangs;}{\f8941\fnil Blackoak;}{\f8943\fnil Willow;}{\f8965\fnil Minion Ornaments;}{\f10767\fnil Joanna MT It;}{\f10768\fnil Joanna MT;}{\f10891\fnil Biffo MT;}{\f10893\fnil Pepita MT;}{\f10913\fnil Goudy Text MT Lombardic Caps;}
{\f10945\fnil Runic MT Cn;}{\f10954\fnil Castellar MT;}{\f11500\fnil Barmeno ExtraBold;}{\f11505\fnil Baskerville BE Medium;}{\f11506\fnil Baskerville BE Italic;}{\f11507\fnil Baskerville BE MediumItalic;}{\f11508\fnil Baskerville BE Regular;}
{\f11581\fnil Colossalis Bold;}{\f11695\fnil Imago ExtraBold;}{\f11770\fnil Poppl-Laudatio Medium;}{\f11771\fnil Poppl-Laudatio Italic;}{\f11773\fnil Poppl-Laudatio MediumItalic;}{\f11775\fnil Poppl-Laudatio Regular;}{\f13098\fnil Lithos Regular;}
{\f13105\fnil Mesquite;}{\f13107\fnil Ironwood;}{\f13217\fnil NuptialScript;}{\f13226\fnil Copperplate33bc;}{\f13879\fnil Boulevard;}{\f13928\fnil Post Antiqua BE Regular;}{\f13929\fnil Post Antiqua BE Medium;}{\f14560\fnil AGaramond SemiboldItalic;}
{\f14561\fnil AGaramond Semibold;}{\f14562\fnil AGaramond;}{\f14563\fnil AGaramond Italic;}{\f14577\fnil Bodoni PosterCompressed;}{\f14626\fnil Dom Casual;}{\f14891\fnil Carta;}{\f14898\fnil Stencil;}{\f14916\fnil Prestige Elite;}
{\f14920\fnil Letter Gothic;}{\f15008\fnil GillSans UltraBold;}{\f15012\fnil GillSans Condensed;}}{\colortbl\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;}{\stylesheet{\s242\qj\sb240 \f16 \sbasedon0\snext0 page number;}{\s243\qj\sb240\tqc\tx4320\tqr\tx8640 \f16 \sbasedon0\snext243 footer;}{\s245\qj\sb240 \f16\fs18\up6 \sbasedon0\snext0 footnote reference;}{
\s246\qj\sb240 \f16\fs20 \sbasedon0\snext246 footnote text;}{\s254\qj\sb120\keepn \b\f21 \sbasedon0\snext0 heading 2;}{\s255\qj\sb240\keepn \b\f21\ul \sbasedon0\snext0 heading 1;}{\qj\sb240 \f16 \sbasedon222\snext0 Normal;}{\s2\qc\sb240 \b\f21 
\sbasedon0\snext2 Title;}{\s3\qj\fi360\li720\ri720 \f21\fs20 \sbasedon0\snext3 Abstract;}{\s4\sb480\sa60\keepn \b\f21\ul \sbasedon0\snext0 Section Head;}{\s5\qj \f22\fs20 \sbasedon0\snext5 code;}{\s6\qj\fi-360\li720 \f16 \sbasedon0\snext6 Bullet;}{
\s7\sb360\tx360 \b\f21 \sbasedon0\snext0 Pattern Head;}{\s8\qc\sb240\sa60 \b\f21\fs20 \sbasedon0\snext8 Caption;}{\s9\qj\sb240 \f21 \sbasedon0\snext9 Contact;}{\s10\qc\sb240 \b\f21 \sbasedon0\snext10 Author;}{\s11\qj\fi-720\li720\sb240 \f16 
\sbasedon0\snext11 Reference;}}{\info{\title Plop95sub}{\author Steve Berczuk}}\widowctrl\ftnbj \sectd \sbknone\linemod0\linex0\cols1\endnhere {\footer \pard\plain \s243\qj\sb240\tqc\tx4320\tqr\tx8640 \f16 PLoP '95\tab \chpgn \tab Steve Berczuk\par 
}\pard\plain \s2\qc\sb240 \b\f21  Organizational Multiplexing:\line Patterns for Processing Satellite Telemetry with Distributed Teams\par 
\pard\plain \s10\qc\sb240 \b\f21 Stephen P. Berczuk\line MIT Center for Space Research\par 
\pard\plain \s3\qj\fi360\li720\ri720\sb240 \f21\fs20 Organizational issues play a significant role in many software architectures, though often more as a side effe
ct than by design. This paper presents a pattern language for developing ground software for satellite telemetry systems that illustrates how to take organization into account in the architecture. In particular, this paper addresses:\par 
\pard \s3\qj\fi-360\li1800\ri720\sb240 \bullet \tab extending a pattern from the 1995 PLoP conference [Berczuk95] into a pattern language.\par 
\pard \s3\qj\fi-360\li1800\ri720 \bullet \tab assembling patterns from other pattern languages into a domain specific pattern language,  and\par 
\bullet \tab including social context as a motivating context for a pattern.\par 
\pard \s3\qj\fi360\li720\ri720\sb240 Since scientific research satel
lite systems are often developed at academic institutions, where similarities between ongoing projects exist only at the architectural level (code typically cannot be reused), documenting architectural insights such as these 
in the pattern form can be a very practical way to achieve reuse. Since assembly of telemetry involves (re)creation of objects from a serial stream, these patterns are relevant to designers of any systems which creates objects from a serial stream \par 
\pard\plain \s255\qj\sb240\keepn \b\f21\ul Introduction\par 
\pard\plain \qj\sb240 \f16 Organizational issues have an impact on the development of software systems. It is important to design an architecture in a way that fits well with existing social and organizational constraints.\par 
\pard \qj\sb240 As an example of how these issues can be addressed, this paper presents a pattern language to guide the development of a ground based system that will{\i  }process telemetry data from an earth-orbiting astronomical observatory
. Systems of this type involve many diverse, and often geographically distributed groups of people;  such a system is challenging to design from a social as well as a technical point of view.{\fs18\up6 \chftn {\footnote \pard\plain \s246\qj\sb240 
\f16\fs20 {\fs18\up6 \chftn }The patterns in this paper might also be of use to designers in other situations where development teams are distributed.}}
  The patterns present in this system are applicable to other systems that have similar organizational constraints. Since telemetry can be considered a form of persistence, where objects are serialized into a stream and transmitted, some of
 these patterns will also be of interest to builders of systems that use parsing and reconstruction of objects from a serial data stream.\par 
This pattern language makes use of Coplien's patterns of organization [Coplien95]{\fs18\up6 \chftn {\footnote \pard\plain \s246\qj\sb240 \f16\fs20 {\fs18\up6 \chftn }
To facilitate understanding of paper copies of this document, the appendix describes summarizes  the patterns from [Coplien95] [Gamma+94] and [Beck] referenced in this paper.}} 
as context for the other patterns, and also shows how to effect some of these patterns in the context of a ground based scientific telemetry processing system. \par 
After a description of the relevant elements of the organizatonal structure of a typical project, patterns which address some of the issues raised by this structure will be described.\par 
\pard\plain \s255\qj\sb240\keepn \b\f21\ul Project Organization\par 
\pard\plain \qj\sb240 \f16 Most of the projects being pursued at the Center For Space Research at MIT  share an organization similar to the following:{\fs18\up6 \chftn {\footnote \pard\plain \s246\qj\sb240 \f16\fs20 {\fs18\up6 \chftn }This particular 
structure is based on that of the X-ray Timing Explorer project (XTE), currently in progress at the MIT Center for Space Research. }}\par 
\pard \qc\sb240 {{\pict\macpict\picw216\pich162 
017a0000000000a200d81101a10064000c574f52440000000000a200d801000a0000000000a200d830001500030049005ca10096000c0200000001000000000000002c000c00150948656c7665746963610300150d000a2e0004000000002b15250b496e737472756d656e74202b070b075465616d2031202b050b05404d49
540da000973000130075004900d7a10096000c02000000010000000000000028002100840b496e737472756d656e74202a0b095465616d20322040202b070b08616e6f746865722028004200870b556e697665727369747920a00097300071001d00a100b8a10096000c020000000100000000000000280084003a13536369
656e6365204f7065726174696f6e73202b1f0b0743656e7465720d28009a005209206174204e41534120a00097a000ac61003d002a00570044009c0030610064002a007e0044ffe800302200500037001ba000ada000ac61003d0093005700ad009c00306100640093007e00adffe8003022005000a0001ba000adff}}
\par 
\pard\plain \s8\qc\sb240\sa60 \b\f21\fs20 Typical Project Organization\par 
\pard\plain \s6\qj\fi-360\li720 \f16 \bullet \tab A number of {\i instrument teams} each with primary responsibility for deployment and analysis of the data from a single scientific instrument that will be on the sate
llite. Often these teams will be at geographically separate locations. \par 
\bullet \tab A central organization (the {\i operations center}
) which performs a coordination function. The operations center may not have the expertise to understand the scientific objectives of each of the instrument teams, and is focused on the operational aspects of the system (processing so many bytes of telemet
ry per second, and archiving data, for example).\par 
\bullet \tab A small base of shared knowledge between instrument teams and operations center.\par 
\bullet \tab Small work groups, particularly at the instrument team locations. At each team site, many of the subsystems fulfill the context of {\i Solo Virtuoso }[Coplien95].\par 
\pard\plain \qj\sb240 \f16 The architecture of the data analysis system takes the following general form:\par 
\pard \qc\sb240 {{\pict\macpict\picw315\pich214 
021d0000000000d6013b1101a10064000c574f52440000000000d6013b01000a0000000000d6013b30002a004c006900d4a10096000c0200000001000000000000002c000c00150948656c7665746963610300150d000a2e0004000000002b5d3c14536369656e6365204f7065726174696f6e73200d2b0b0b0e50726f6365
7373657320616e6420280052005917617263686976657320646174612066726f6d20616c6c202b180b0b696e737472756d656e7473a000973000a8002a00d500823000a8009500d500eda10096000c0200000001000000000000002800b6003c0b496e737472756d656e74202b0a0b065465616d310d2b030b07436c69656e
740da00097a10096000c0200000001000000000000002800b500a30b496e737472756d656e74202b0a0b065465616d320d2b030b06436c69656e74a00097a000ab61001a00740034008effe8003022000f00810012a000ada10096000c010000000100000000000000280015008e0954656c656d65747279a00097a000ab61
0079007b00930095ffe8003022006900880017a000ada000ab610098005900b20073001600302200860086e41ba000ada000ab610096009c00b000b6011d003022008700871d18a000ada10096000c0100000001000000000000002b116a1a53656e6473206461746120746f20617070726f707269617465202a0b0f746561
6d277320636c69656e74200d2a0b0e666f722070726f63657373696e67a00097ff}}\par 
\pard\plain \s8\qc\sb240\sa60 \b\f21\fs20 Typical Architecture\par 
\pard\plain \qj\sb240 \f16 The operations center depends on the instrument teams for providing details about telemetry specific to each instrument.\par 
\pard \qj\sb240 Each of the teams has very different motivations; the instrument teams are focused on getting the best science from "their" instruments, and the operation
s team is focused on getting the system assembled (with science often a secondary consideration). The teams have a large degree of autonomy, but they must agree on certain interfaces. As a result, a minimal amount of coupling is best{\fs18\up6 \chftn 
{\footnote \pard\plain \s246\qj\sb240 \f16\fs20 {\fs18\up6 \chftn }It can be argued that minimizing coupling is an important consideration in
 building any system, but because of the degree of decentralization and non locality in the projects being discussed here, it is especially important.}}
. A major challenge in designing an architecture of such a system is to handle the organizational and political issues that arise, in such a way that individual organizations are not overly affected by external forces. \par 
\pard \qj\sb240 The general organizational forces involved in scientific satellite telemetry processing systems can be summarized as follows: \par 
\pard\plain \s6\qj\fi-360\li720 \f16 \bullet \tab Distributed experience\par 
\bullet \tab Small teams, distributed geographically.\par 
\bullet \tab Little carryover of personnel from one project to the next.\par 
\pard\plain \qj\sb240 \f16 
This paper focuses on the process of classification and interpretation of the telemetry packets as they are received from the spacecraft, and dispatching the resulting data objects for further processing. Other patterns can be written to guide the developm
ent of other aspects of the system such as commanding and data analysis.\par 
\pard \qj\sb240 While this paper discusses patterns found in a scientific satellite application, the patterns have applications to other domains as well.\par 
\pard\plain \s255\qj\sb240\keepn \b\f21\ul The Patterns\par 
\pard\plain \qj\sb240 \f16 The architectural goals and the patterns that complete them are as follows:\par 
\pard \qj\fi-360\li1080\sb240 \bullet \tab Facilitate autonomous development: {\i Loose Interfaces}\par 
\bullet \tab Interpret a Data Stream: {\i Parser/Builder}\par 
\bullet \tab Divide responsibilities for interpretation: {\i Hierarchy of Factories}\par 
\bullet \tab Connect Systems: {\i Handlers}\par 
\pard\plain \s255\qj\sb240\keepn \b\f21\ul 1. \tab Loose Interfaces\par 
\pard\plain \qj\sb240 \f16 {\i Context}:{\i  }To help development of a system 
with many teams proceeding at a reasonable pace it is important  to keep interfaces between systems loose. This is particularly important in a situation where there are teams of developers that are geographically distributed and a situation where rapid tur
naround time for design and development is important. \par 
{\i Problem}: Communication is difficult. If requirements are changing and the teams are located in a variety of places then the poor communication can stall a project. This can be particularly problematic 
when an organization does not have an architectural center, such as specified by {\i Architect Controls Product }[Coplien95].\par 
\pard \qj\sb240 
This is particularly applicable in a research satellite application where teams are small, requirements are changing, and the potential for gridlock is great if dependencies are too high. The operations center is the organizational center of the architectu
re, but does not always have the capability to design a complete system. To avoid development bottlenecks, we need to be able to limit the effect one team's work will have on another.\par 
\pard \qj\sb240 {\i Therefore}: Limit the number of explicit, static, interfaces. Use loose interfaces like {\i Callback} and {\i Parser/Builder} and {\i Hierarchy of Factories} to achieve this.\par 
\pard \qj\sb240 Decoupling interfaces in this way will also simplify the development of {\i Early Program} [Beck], since it provides a mechanism for building incremental systems. It can also facilitate implementation of {\i Developer Controls Process }
[Coplien95], by making it easy to define features that can be controlled by a developer or group.\par 
\pard\plain \s255\qj\sb240\keepn \b\f21\ul 2.\tab Parser/Builder\par 
\pard\plain \qj\sb240 \f16 {\i Context}: Many systems need to read data from a stream and classify elements on the steam as objects. A way is needed to create arbitrary objects based on tokens in the data stream. \par 
\pard \qj\sb240 {\i Problem}
:  Given a data stream, we want to interpret it, classifying the elements into the appropriate class of object. The data stream contains tags that can be used to identify the raw data, and we want to convert the stream into object form, so we can process t
he data. \par 
\pard \qj\sb240 As a non-telemetry related example consider the problem of reading in raw UNIX files and classifying them into types of files based on their "magic number" \emdash 
as in the tags in the /etc/magic file. You could create the appropriate subclass of {\i File} and then invoke its virtual edit() method,  bringing up the appropriate editor. \par 
\pard \qj\sb240 
In a telemetry processing system each telemetry packet has identifying information in its header. The telemetry processing system design requires that an object, once created, knows how to process itself (i.e., we will not use a dispatch table, or a switch
 on type\emdash  this is to satisfy the {\i Organization Follows Location}[Coplien95] pattern). At the lowest level objects will be created using a {\i Factory Method} [Gamma+94]
. Each class of packets will be processed differently; some will assemble themselves into larger units, others will issue messages.  Consider the following hierarchy, as shown in figure 1, for a spacecraft that there are two subclasses of {\i Packet}:{\i 
APackets} and {\i BPackets}.\par 
\pard \qc\sb240\keepn {{\pict\macpict\picw255\pich155 
00f400000000009b00ff1101a10064000c574f524400000000009b00ff01000a00000000009b00ff3000200063004c00ab30006b00b6009700fe30006e0015009a005da10096000c0100000001000000000000002c000c00150948656c7665746963610300150d000c2e0004000000002b7239065061636b6574a00097a100
96000c010000000100000000000000280083001e07415061636b6574a00097a10096000c01000000010000000000000028008000c007425061636b6574a00097a000ab61003e00670058008100d6003022006e003d32e0a000ada000ab610041008c005b00a6005a003022006900d4cae7a000adff}}\par 
\pard\plain \s8\qc\sb240\sa60 \b\f21\fs20 Sample Packet Hierarchy\par 
\par 
\pard\plain \qj\sb240 \f16 We want each {\i Packet}, once created, to process itself by using a virtual method, {\i process()}. If we pass  a data stream into a factory, we want  to return  a pointer to a {\i Packet}
 that has the appropriate type.  To summarize the forces:\par 
\pard\plain \s6\qj\fi-360\li720 \f16 \bullet \tab There is a need to interpret a raw data stream.\par 
\pard \s6\qj\fi-360\li720 \bullet \tab There is a generic way to process the packets once they are returned from the factory. \par 
\pard \s6\qj\fi-360\li720 \bullet \tab The raw data contain tags which can be used for classification.\par 
\pard\plain \qj\sb240 \f16 {\i Therefore: }to resolve these forces use a {\i Parser/Builder} which reads the identifying information from the header of the packet, and creates an object of the appropriate type, removing only one object's w
orth of data from the stream. \par 
\pard \qj\sb240 An example of a client interface is:\par 
\pard\plain \s5\qj \f22\fs20 \tab while (!dataStream.empty()) \{\par 
\tab \tab PacketFactory f;\par 
\tab \tab Packet* p = f.make(dataStream);\par 
\tab \tab if(p) p->process()\par 
\tab \}\par 
\pard\plain \qj\sb240 \f16 This is a variant of {\i Abstract Factory}[Gamma+94] but the object to be created is defined in the data stream, rather than by the client. {\i Factories} and {\i Parser/Builder}s can be used to in part implement {\i 
Loose Interfaces } by providing a means of separating clients from producers of data (assuming that data producers also define the factories). \par 
\pard\plain \s254\qj\sb120\keepn \b\f21 Other uses:\par 
\pard\plain \qj\sb240 \f16 In some object persistence mechanisms, objects are assigned class Id's which are placed in the storage stream. These Ids are restored first to allow the system decide what class object to make from the restored stream. \par 
\pard \qj\sb240 {\i Parser/Builder} is used in in the pattern {\i Query Objects} {\fs18\up6 \chftn {\footnote \pard\plain \s246\qj\sb240 \f16\fs20 {\fs18\up6 \chftn }{\i Query Objects}
 addresses the problem of handling the generation and executation of SQL statements in an object-oriented way, when you are trying to use a relational database to store objects.}}[Chasms] to convert SQL statements to QUERY objects. [Riehle96]
 discusses similar issues, building objects on a desktop using specifications.\par 
\pard \qj\sb240 The distinction between this pattern and {\i Builder} [Gamma+94] and {\i Factory Method} [Gamma+94]
 is that in this pattern the factory reads from a stream and the client does not know which type of object will be returned. For text interpretation, {\i Parser/Builder} can be a front end to the {\i Interpreter} [Gamma+94] pattern.  \par 
\pard\plain \s255\qj\sb240\keepn \b\f21\ul 3.\tab Hierarchy of Factories \par 
\pard\plain \qj\sb240 \f16 {\ul Also Known As:} {\i Composite Factory}{\b \par 
}\pard \qj\sb240 {\i Context}: Once we decide that the {\i Parser/Builder} is the right way to 
create objects, we need to partition the details of how to construct objects of various classes into the various groups responsible for this construction, in other words we need to have {\i Loose Interfaces}. We want to complete {\i Form Follows Function}
 [Coplien95] or {\i Organization Follows Location} [Coplien95].  On a lower level we want to implement {\i Developer Controls Process }[Coplien95] for a system which creates objects of various types.\par 
\pard \qj\sb240 {\i Problem}: In a distributed work group it is important to divide responsibilities as cleanly as possible and reduce coupling. There should be a way to do this in a creational system.\par 
\pard \qj\sb240 
Sometimes the secrets of classifying elements in a data stream are divided between various groups. The reasons for this partitioning can involve company politics, or simply that the knowledge of the telemetry formats is distributed and there is a strong de
sire to reduce coupling.  We need a way to partition the responsibilities for classifying the telemetry packets, while maintaining a centralized client interface.  \par 
\pard \qj\sb240 
In a telemetry application, various instruments can generate telemetry which is then fed into one stream. The instruments are  developed by different teams (at different institutions, for example),  and these teams have control over the format of the telem
etry that they generate (after taking some standard headers into account).\par 
\pard \qj\sb240 We want a way to isolate the details for identifying each team's objects, while at the same time allowing the objects to be identified and 
created in a single application. The scheme that we develop should be layered so that the main factory needs to know only of the existence of a class of objects, but need not know how deep the hierarchy below that class 
is. Packets created from the hierarchy are processed in a generic way,  perhaps by using virtual functions.  \par 
\pard \qj\sb240 One way to address the classification problem is to put all the  classification/dispatch logic into a single {\i Parser/Builder} (combining the {\i Interpreter} [Gamma+94] pattern with a {\i Builder }[Gamma+94]) \emdash 
 perhaps by using a big switch statement\emdash  and rely on communications between groups to ensure
 that the details make it into the master code through some  communications method. This is error prone, and subject to delays. We could also divide the processing into a number of factories and have the client call each in turn. This violates our requirem
ent of  transparency, and the client needs to know when a new class of object is  added.\par 
\pard \qj\sb240 It would be useful to have a way to have the client interface emulate a single  Factory, but hide the details of the construction hierarchy. \par 
\pard \qj\sb240 To summarize the forces:\par 
\pard\plain \s6\qj\fi-360\li720 \f16 \bullet \tab Division of responsibilities ({\i Organization Follows Location}).\par 
\bullet \tab A need for a central interface for parsing data streams and building objects.\par 
\bullet \tab A need to add objects to the construction hierarchy in a manner transparent to clients.\par 
\bullet \tab The ability (or requirement) to process entities by virtual functions. \par 
\bullet \tab Each class of object can know about its immediate derived classes.\par 
\pard\plain \qj\sb240 \f16 {\i Therefore}: Use a hierarchy of factories, each of which understands the criteria  f
or making a packet of its type, and knows about the immediate  subtypes. The client invokes the make method with the base class  factory instance. That factory checks to see that there is indeed an 
object of class packet in the stream, based on some attributes. The factory then passes the data stream to the factories of each of its immediate  subclasses, which check the appropriate data fields in the manner of  the {\i Parser/Builder} pattern.\par 
\pard \qj\sb240  The {\i Singleton} pattern [Gamma+94] can be used to access the factories for the derived classes, or the members of the hierarchy can be registered with the master factory at run time.\par 
\pard \qj\sb240  While this pattern violates encapsulation to some extent by requiring that a base class know about it
s immediate subclasses, it can be made acceptable by agreeing on generic interface classes (say, one per team) and allow each team free reign to subclass these interface 
classes. Also in this application this requirement is not terribly limiting, since the top level operations team knows abou the basic instrument team interfaces and the number of instrument teams is fixed by contract when the project begins.\par 
\pard \qc\sb240  {{\pict\macpict\picw274\pich143 
013700000000008f01121101a10064000c574f524400000000008f0112a000ab01000a00000000008f0112610036006e0050008800d1003022006a00472fdca000ad3000100051004200b930006900a8008e0111300069001d008e008aa000ab61003600850050009f0063003022006900cccbdda000ada10096000c010000
0001000000000000002c000c00150948656c7665746963610300150d000c2e0004000000002b63230e5061636b6574466163746f72790da00097a10096000c01000000010000000000000028007f00280e5061636b657442466163746f7279a00097a10096000c010000000100000000000000298e0e5061636b6574434661
63746f7279a00097a10096000c0100000001000000000000000d000928003900700c6372656174655061636b6574a0009722002b00585700ff}}\par 
\pard\plain \s8\qc\sb240\sa60 \b\f21\fs20 Hierarchy of Factories\par 
\pard\plain \qj\sb240 \f16 An example implementation is:\par 
\pard\plain \s5\qj \f22\fs20 //Base class factory method\par 
\tab Packet* PacketFactory::make(Stream* dataStream)\{\par 
\tab  Packet* pkt=0;\par 
\tab if(isAPacket(dataStream) \{\par 
 \tab if(! pkt = APacket::factory()->make(dataStream))\par 
\tab   if(!pkt = BPacket::factory()->make(dataStream))\{\tab \par 
\tab   pkt = new Packet(dataStream);\tab \par 
\tab \}\par 
\tab return pkt;\par 
\tab \}\par 
\pard\plain \qj\sb240 \f16  The result of applying  this pattern is that each class needs to know only:\par 
\pard\plain \s6\qj\fi-360\li720 \f16 \bullet \tab The criteria for what constitutes a member of that class in terms of elements in the data stream.\par 
\bullet \tab The immediate subclasses.\par 
\pard\plain \qj\sb240 \f16 It is possible to use a {\i Registration} {\fs18\up6 \chftn {\footnote \pard\plain \s246\qj\sb240 \f16\fs20 {\fs18\up6 \chftn }This pattern is not yet written, but would specify a mechanism for notifying a base class factory
 that a derived class factory has been created. The basic idea would be similar to the View/Model connection in a Model/View/Controller mechanism, but would also address issue
s of uniqueness (only one instance of each derived class can notify a base class) and guaranteed notification (the construction of any object/factory of the derived classes would generate a registration event automatically).}}
 mechanism to inform the base class of what the subclasses are rather than hard coding the relationship. It is also possible to implement this pattern using containment rather than inheritance.\par 
\pard\plain \s254\qj\sb120\keepn \b\f21 Other uses:\par 
\pard\plain \qj\sb240 \f16 This pattern is also useful for isolating the definition of packets for which a single team is responsible, so the information can be encapsulated, making it easier to work on a project with large or widely distributed teams.
\par 
\pard\plain \s254\qj\sb120\keepn \b\f21 Related Patterns\par 
\pard\plain \qj\sb240 \f16 This is similar to the {\i Builder} [Gamma+94] pattern in that it has a hierarchy of "factories." It is different in that the data stream defines what is made rather than the application
 explicitly specifying what objects to construct by argumenst to the factory.\par 
\pard \qj\sb240 This pattern helps us realize {\i Organization Follows Location} and {\i Code Ownership} [Coplien95]\par 
\pard\plain \s255\qj\sb240\keepn \b\f21\ul 4.\tab Handlers {\plain \f16\fs18\ul\up6 \chftn {\footnote \pard\plain \s246\qj\sb240 \f16\fs20 {\fs18\up6 \chftn }Adapted from PLoP 94 paper. See [Berczuk95] for details.}}\par 
\pard\plain \qj\sb240 \f16  {\i Context}: This pattern provides for decoupling needed to implement {\i Organization Follows Location} [Coplien95]
, for the products of a creational system. After we assemble packets from the telemetry stream we process them, generating data products. We need a way to direct the processing of these new data products. \par 
\pard \qj\sb240 {\i Problem}: In an environment where components developed by separate teams with different specific goals must inter-operate, it is necessary to partition responsibilities in such a way that dependencies can b
e reduced while interoperability is maintained. In particular well defined portions of the system should be isolated fron the to be specified pieces. This may be particularly important if the teams are geographically distributed.\par 
\pard \qj\sb240 To summarize the forces at work:\par 
\pard \qj\fi-360\li360\sb240 \bullet \tab The requirements for the end to end system are not complely specified.\par 
\pard \qj\fi-360\li360\sb240 \bullet \tab Requirements for one component of a system need to be available before downstream processing is defined.\par 
\bullet \tab Upstream and downstream components will be demonstrated/tested at different times.\par 
\bullet \tab Upstream components should know nothing of the downstream processing.\par 
\pard \qj\sb240 \par 
\pard \qc\sb240  {{\pict\macpict\picw288\pich240 
024b0000000000f001201101a10064000c574f52440000000000f0012001000a0000000000f001203000180047003f00a030006a00a4009100fd30007000210097007aa10096000c0100000001000000000000002c000c00150948656c7665746963610300150d000c2e0004000000002b5e3007466163746f7279a00097a0
00ab61005b00af007500c9011a003022004000863125a000ada10096000c0100000001000000000000002b5a5106456e74697479a00097a10096000c0100000001000000000000000d000a28004f00a20763726561746573a00097a10096000c0100000001000000000000000d000c280088002a0b4170706c69636174696f
6ea00097a000ab6100310056004b007000c3003022006f003b24d4a000ada10096000c0100000001000000000000000d000a28006300500c496e7374616e746961746573a000970b000600064000ce002100ef0059a10096000c01000000010000000000000004010d000c2800dd002a07456e746974790d2a0d05436c6173
73a000973000cb006b00ee00b5a10096000c01000000010000000000000004002800de00770748616e646c6572a000972200950063001ba000ab6100bf004000d9005a000e003023ee17a000ada000ab6100ba007400d4008e011a00302200b100631913a000ada10096000c0100000001000000000000000d000a2800a900
660a4173736f636961746573a00097a000ab6100ba008f00d400a9001c003022009000e1c033a000ada10096000c0100000001000000000000002b6f050d53656e64732053656c6620746fa00097ff}}\par 
\pard\plain \s8\qc\sb240\sa60 \b\f21\fs20 Callback Pattern\par 
\pard\plain \qj\sb240 \f16 {\i Solution}: Use a callback mechanism to define connections between assembly process and the processing process. Provide a mechanism ({\i Registration}) to assign a {\i Handler}
 object for which a completed entity will be forwarded.\par 
\pard \qj\sb240 One implementation uses a static {\i Handler} data member for class {\i Unit}. Whenever a {\i Unit} is completed it hands itself to the {\i Handler} for processing. \par 
\pard \qj\sb240 The issue of when to subclass and when to differentiate objects by an attribute can be a confusing one, and can only be resolved by examing the specific details such as the number of classes, and the type of behaviour. \par 
This pattern is similar to {\i Observer} [Gamma+94] but differs in that the "observer" is the class of object being created, and the event that triggers the notification is the creation of an object of a class.\par 
\pard\plain \s255\qj\sb240\keepn \b\f21\ul Conclusions\par 
\pard\plain \qj\sb240 \f16 Organizational issues play a significant role in determining the direction a software system can take. They affect the context in which a system is developed. It 
is also necessary to architect a system to minimize the negative effects of organizational issues. When the  organizational patterns such as those in [Coplien95]
 exist, there should be ways to architect a system to aid the realization of good organizational patterns. This paper illustrates some of the ways to reflect organizational issues in the context of other patterns as well as showing some ways to implement g
ood organizational patterns in a software architecture.\par 
\pard \qj\sb240 There is a common structure to scientific satellite applications
, and there also tends to be little carryover of personnel between projects, so many of the lessons learned must be rediscovered. Since there are different hardware and software platforms from one project to the next and the details
 of each project vary greatly, {\i code reuse} is not really feasible. {\i Design elements} can be reused, however. This application domain, and others which share these factors, could benefit greatly from documentation of a
rchitectural principles as patterns. \par 
\pard \qj\sb240 While the patterns explicitly address scientific spacecraft satellite telemetry, the ideas in this paper can be applicable to any system being built with a number of distinct teams. Some of the patterns such as {\i Parser/Builder}
 also have applicability in other creational systems.\par 
\pard\plain \s255\qj\sb240\keepn \b\f21\ul References\par 
\pard\plain \s11\qj\fi-720\li720\sb240 \f16 [Berczuk95] Berczuk, Steve, "Handlers for Separating Assembly and Processing." In {\i Pattern Languages of Program Design}. James O. Coplien & Douglas Schmidt Eds. Reading, MA: Addison Wesley, 1995.\par 
[Coplien95] Coplien, James. "A Development Process Generative Pattern Language." In {\i Pattern Languages of Program Design}. James O. Coplien & Douglas Schmidt Eds. Reading, MA: Addison Wesley, 1995.\par 
[Gamma+94] Eric Gamma, Ralph Johnson, Richard Helm & John Vlissides, {\i Design Patterns: Elements of Object-Oriented Software Architecture}. Addison Wesley, 1994.\par 
[Beck] Beck, Kent. {\i Early Development Patterns.} Portland Patterns Repository. URL: http://c2.com/ppr/early.html.\par 
\pard \s11\qj\fi-720\li720\sb240 [Chasms] Brown, Kyle and Whitenack, Bruce. "Crossing Chasms\endash  A Pattern Language for Object-RDBMS Integration." In {\i Pattern Languages of Program Design}
., Volume II John Vlissides, Norm Kerth, and James O. Coplien Eds. Reading, MA: Addison Wesley, 1996.\par 
\pard \s11\qj\fi-720\li720\sb240 [Riehle96] Riehle, Dirk. "Patterns for Encapsulating Class Trees." In {\i Pattern Languages of Program Design}., Volume II John Vlissides, Norm Kerth, and James O. Coplien Eds. Reading, MA: Addison Wesley, 1996.\par 
\pard\plain \s255\qj\sb240\keepn \b\f21\ul Acknowledgements\par 
\pard\plain \qj\sb240 \f16 
Thanks to Dirk Riehle, Doug Lea and Lena Davis for reviewing early and final drafts, and the members of the PLoP working group for making many useful suggestions. The IM Pei home group at PLoP 95 made helpful suggestions on how to reference other patterns,
 and the Appendix is based on their ideas. This work was supported in part by NASA/GSFC contract number NAS5-30612.\par 
\pard\plain \s9\qj\sb240 \f21 Authors address: Room 37-561; 77 Massachusetts Ave, Cambridge MA 02139. email; berczuk@mit.edu.\par 
\sect \sectd \linemod0\linex0\cols1\endnhere \pard\plain \s255\qj\sb240\keepn \b\f21\ul Appendix:  Brief Descriptions of Referenced Patterns\par 
\pard\plain \qj\sb240 \f16 This appendix briefly describes the intent of the referenced patterns. These summaries are quite brief and the orginal pattern should be consulted to fully understand it.\par 
\pard\plain \s254\qj\sb120\keepn \b\f21 Patterns from "A Development Process Generative Pattern Language" [Coplien95]. \par 
\pard\plain \qj\sb240 \f16 These summaries are an adaptation of the work of the IM Pei group at PLoP 95. \par 
{\i Architect Controls Product}. Describes how a central architect in a controlling role can help build a cohesive product.\par 
\pard \qj\sb240 {\i Code Ownership}.  Modules are assigned to developers who control then and typically make all changes. This simplifies the task of keeping up with the details of the entire system.\par 
{\i Developer Controls Process}. .  Use a developer as a focal point for the project communication and process for the development of a given feature.\par 
{\i Form Follows Function}. . In a project lacking well-defined roles, group closely related activities (those coupled by either implementation, manipulation of the same artifacts, or domain related)  together.\par 
{\i Organization Follows Location}. When assigning tasks arcoss a geographically distributed workforce, assign architectural responsibilities in such a way that decisions can be made locally.\par 
\pard \qj\sb240 {\i Solo Virtuoso}. Design and implementation of a small software product which is required in a short time should  be done by one or two people.\par 
\pard\plain \s254\qj\sb120\keepn \b\f21 Patters from {\i Design Patterns }[Gamma+94]. \par 
\pard\plain \qj\sb240 \f16 These summaries are from the intent summaries on the inside cover of [Gamma+94], and are repeated here for reference. \par 
{\i Abstract Factory}. Provide an interface for creating families of related or deoendent objects without specifying their concrete classes.\par 
{\i Builder}. Spearate the construction of a complex object from its representation so that the same construction process can create different representations.\par 
{\i Factory Method}. Define an interface for creating an object but let classes decide which classes to instantiate.\par 
\pard \qj\sb240 {\i Interpreter}. Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.\par 
\pard \qj\sb240 {\i Singleton}. Ensure a class only has one instance, and provide a global point of access to it.\par 
\pard\plain \s254\qj\sb120\keepn \b\f21 Patterns from Early Development Patterns [Beck]\par 
\pard\plain \qj\sb240 \f16 {\i Early Program}. Build concrete software early on that shows how the system works and fulfills specified scenarios.\par 
\pard \qj\sb240 \par 
}